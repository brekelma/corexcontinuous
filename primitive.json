{
  "id": "d2d4fefc-0859-3522-91df-7e445f61a69b",
  "name": "corexcontinuous.corex_continuous.CorexContinuous",
  "common_name": "DSBox Corex Continuous",
  "description": "Return components/latent factors that explain the most multivariate mutual information in the data under Linear Gaussian model. For comparison, PCA returns components explaining the most variance in the data.  Serves as DSBox 'wrapper' for https://github.com/gregversteeg/linearcorex",
  "languages": [
    "python2.7", "python3.5", "python3.6"
  ],
  "library": "corexcontinuous",
  "version": "0.1.7",
  "source_code": "https://github.com/brekelma/corexcontinuous.git",
  "is_class": true,
  "attributes": [
    {
      "shape": "n_samples, n_hidden",
      "type": "array",
      "name": "latent_factors",
      "description": "Transformation of data into continuous latent factors. "
    },
    {
      "type": "corexcontinuous.linearcorex.linearcorex.linearcorex.Corex",
      "name": "model",
      "description": "Linear Corex model (see https://github.com/gregversteeg/linearcorex)."
    },
    {
      "type": "bool",
      "name": "fitted",
      "description": "Whether model has been fit."
    }
  ],
  "parameters": [
    {
      "type": "int",
      "name": "n_hidden",
      "description": "Number of components or latent factors to use. Default n_hidden is .2 * #columns",
      "is_hyperparameter": true,
      "default": "None",
      "range": [0, 1000] ,
      "kind": "uniform"
    },
    {
      "type": "float",
      "name": "latent_pct",
      "description": "Instead of n_hidden, specify % of # columns as latent dimension.  Default n_hidden is .2 * #columns",
      "is_hyperparameter": true,
      "default": ".20",
      "range": [0,1],
      "kind": "uniform"
    },
    {
      "type": "int",
      "name": "max_iter",
      "description": "Maximum number of iterations taken for the solvers to converge. ",
      "is_hyperparameter": false
    },
      {
      "type": "bool",
      "name": "discourage_overlap",
      "description": "Whether to encourage non-overlapping / disentangled latent factors ",
      "is_hyperparameter": false
    },
    {
      "type": "str",
      "name": "gaussianize",
      "description": "Transform each marginal to be as close to a standard Gaussian as possible. 'standard' (default) just subtracts the mean and scales by the std.  'empirical' does an empirical gaussianization (noninvertible). 'outliers' tries to squeeze in the outliers.",
      "is_hyperparameter": false
    },
      {
      "type": "bool",
      "name": "anneal",
      "description": "Whether to add noise with decreasing magnitude to increase robustness.",
      "is_hyperparameter": false
    },
    {
      "type": "bool",
      "name": "gpu",
      "description": "Take advantage of GPU comptuational speedup",
      "is_hyperparameter": false
    },
    {
      "type": "int",
      "name": "seed",
      "description": "The seed of the pseudo random number generator to use. ",
      "is_hyperparameter": false
    },
    {
      "type": "float",
      "name": "tol",
      "description": "Tolerance for stopping criteria. ",
      "is_hyperparameter": false
    },
    {
      "type": "int",
      "name": "verbose",
      "description": "Set true for verbose output or >1 to get even more verbosity.",
      "is_hyperparameter": false
    }
  ],
  "methods_available": [
    {
      "name": "fit",
      "id": "corexcontinuous.corex_continuous.CorexContinuous.fit",
      "description": "'Fit the model according to the given training data.\n",
      "returns": {
        "type": "object",
        "name": "self",
        "description": "Returns self. '"
        },
      "parameters": [
        {
          "shape": "n_samples, n_features",
          "type": "array-like, sparse matrix",
          "name": "inputs",
          "description": "Training vector, where n_samples is the number of samples and n_features is the number of features. ",
          "is_hyperparameter": false
        }
        ]
    },
    {
      "name": "produce",
      "id": "corexcontinuous.corex_continuous.CorexContinuous.produce",
      "description": "'Transform data according to learned model.\n",
      "returns": {
        "type": "array-like",
        "shape": "n_samples, n_hidden",
        "name": "latent_factors",
        "description": "Returns latent factors/components for each sample. '"
      },
      "parameters": [
        {
          "shape": "n_samples, n_features",
          "type": "array-like, sparse matrix",
          "name": "inputs",
          "description": "Training vector, where n_samples is the number of samples and n_features is the number of features. ",
          "is_hyperparameter": false
        }
        ]
      }, 
      {
      "name": "set_training_data",
      "id": "corexcontinuous.corex_continuous.CorexContinuous.set_training_data",
      "description": "Add training data.\n",
      "returns": {
        "type": "object",
        "name": "self",
        "description": "Returns self. '"
        },
      "parameters": [
        {
          "shape": "n_samples, n_features ",
          "type": "array-like, sparse matrix",
          "name": "inputs",
          "description": "Training vector of raw text.  Method automatically includes sklearn Tfidf preprocessing into bag of words.",
          "is_hyperparameter": false
        }
        ]
      },
      {
      "name": "set_params",
      "id": "corexcontinuous.corex_continuous.CorexContinuous.set_params",
      "description": "Set latent factors.\n",
      "returns": {
        "type": "object",
        "name": "self",
        "description": "Returns self. '"
        },
      "parameters": [
        {
          "type": "NamedTuple",
          "name": "params",
          "description": "Params object with 'latent_factors' : np.ndarray = (n_documents, n_hidden) setting the latent representation.",
          "is_hyperparameter": false
        }
        ]
      },
      {
      "name": "get_params",
      "id": "corexcontinuous.corex_continuous.CorexContinuous.get_params",
      "description": "Get latent factors.\n",
      "returns": {
        "type": "Params",
        "name": "params",
        "description": "Params NamedTuple with 'latent_factors' : np.ndarray = (n_samples, n_hidden) setting the latent representation."
        },
      "parameters": []
      }
    ],
  "algorithm_type": ["Dimensionality Reduction"],
  "learning_type": ["Unsupervised learning"],
  "task_type": ["Feature extraction"],
  "tags": [
    "factor analysis"
  ],
  "is_deterministic": false,
  "handles_classification": false,
  "handles_regression": false,
  "handles_multiclass": false,
  "handles_multilabel": false,
  "input_type": [
    "DENSE",
    "SPARSE"
  ],
  "output_type": [
    "FEATURES"
  ],
  "team": "ISI",
  "schema_version": 1.0,
  "build": [{
    "type": "pip",
    "package": "corexcontinuous"
  }],
  "compute_resources": {
    "sample_size": [0, 0],
    "sample_unit": ["MB", "MB"],
    "num_nodes": [1, 1],
    "cores_per_node": [4, 4],
    "gpus_per_node": [0, 0],
    "mem_per_node": [1, 1000],
    "disk_per_node": [1, 1000],
    "mem_per_gpu": [0, 0],
    "expected_running_time": [0, 0]
  },
  "interfaces": ["unsupervised_learning.UnsupervisedLearnerPrimitiveBase"],
  "interfaces_version": "2017.9.22rc0"
}
