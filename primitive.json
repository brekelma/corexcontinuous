{
    "schema": "https://metadata.datadrivendiscovery.org/schemas/v0/primitive.json",
    "id": "d2d4fefc-0859-3522-91df-7e445f61a69b",
    "version": "0.2.1",
    "name": "corexcontinuous.corex_continuous.CorexContinuous",
    "description": "Return components/latent factors that explain the most multivariate mutual information in the data under Linear Gaussian model. For comparison, PCA returns components explaining the most variance in the data.  Serves as DSBox 'wrapper' for https://github.com/gregversteeg/linearcorex\"",
    "python_path": "d3m.primitives.corexcontinuous.corex_continuous:CorexContinuous",
    "original_python_path": "corexcontinuous.corex_continuous.CorexContinuous",
    "source": {
        "name": "Rob Brekelmans",
        "contact": "mailto:brekelma@usc.edu",
        "uris": [
            "https://github.com/brekelma/corexcontinuous.git"
        ]
    },
    "installation": [
        {
            "type": "PIP",
            "package": "corexcontinuous",
            "version": "0.2.1"
        }
    ],
    "algorithm_types": [
        "EXPECTATION_MAXIMIZATION_ALGORITHM"
    ],
    "primitive_family": "FEATURE_CONSTRUCTION",
    "preconditions": [
        "NO_MISSING_VALUES",
        "NO_CATEGORICAL_VALUES"
    ],
    "hyperparams_to_tune": [
        "n_hidden"
    ],
    "primitive_code": {
        "class_type_arguments": {
            "Inputs": "d3m_metadata.container.pandas.DataFrame",
            "Outputs": "d3m_metadata.container.numpy.ndarray",
            "Params": "corexcontinuous.corex_continuous.CorexContinuous_Params",
            "Hyperparams": "corexcontinuous.corex_continuous.CorexContinuous_Hyperparams"
        },
        "interfaces_version": "2018.1.6rc0",
        "interfaces": [
            "unsupervised_learning.UnsupervisedLearnerPrimitiveBase",
            "base.PrimitiveBase"
        ],
        "hyperparams": {
            "n_hidden": {
                "type": "d3m_metadata.hyperparams.Union",
                "default": 0.2,
                "structural_type": "float",
                "semantic_types": [],
                "configuration": {
                    "n_hidden int": {
                        "type": "d3m_metadata.hyperparams.Uniform",
                        "default": 2,
                        "structural_type": "float",
                        "semantic_types": [],
                        "description": "number of hidden factors learned",
                        "lower": 1,
                        "upper": 50,
                        "upper_inclusive": false,
                        "q": 1
                    },
                    "n_hidden pct": {
                        "type": "d3m_metadata.hyperparams.Uniform",
                        "default": 0.2,
                        "structural_type": "float",
                        "semantic_types": [],
                        "description": "number of hidden factors as percentage of # input columns",
                        "lower": 0,
                        "upper": 0.5,
                        "upper_inclusive": false,
                        "q": 0.05
                    }
                }
            }
        },
        "arguments": {
            "hyperparams": {
                "type": "corexcontinuous.corex_continuous.CorexContinuous_Hyperparams",
                "kind": "RUNTIME"
            },
            "random_seed": {
                "type": "int",
                "kind": "RUNTIME",
                "default": 0
            },
            "docker_containers": {
                "type": "typing.Union[typing.Dict[str, str], NoneType]",
                "kind": "RUNTIME",
                "default": "None"
            },
            "timeout": {
                "type": "typing.Union[float, NoneType]",
                "kind": "RUNTIME",
                "default": "None"
            },
            "iterations": {
                "type": "typing.Union[int, NoneType]",
                "kind": "RUNTIME",
                "default": "None"
            },
            "inputs": {
                "type": "d3m_metadata.container.pandas.DataFrame",
                "kind": "PIPELINE"
            },
            "params": {
                "type": "corexcontinuous.corex_continuous.CorexContinuous_Params",
                "kind": "RUNTIME"
            }
        },
        "class_methods": {
            "can_accept": {
                "arguments": {
                    "method_name": {
                        "type": "str"
                    },
                    "arguments": {
                        "type": "typing.Dict[str, typing.Union[d3m_metadata.metadata.Metadata, type]]"
                    }
                },
                "returns": "typing.Union[d3m_metadata.metadata.DataMetadata, NoneType]",
                "description": "Returns a metadata object describing the output of a call of ``method_name`` method with\narguments ``arguments``, if such arguments can be accepted by the method. Otherwise it\nreturns ``None``.\n\nDefault implementation checks structural types of ``arguments`` to match method's arguments' types.\n\nBy (re)implementing this method, a primitive can fine-tune which arguments it accepts\nfor its methods which goes beyond just structural type checking. For example, a primitive might\noperate only on images, so it can accept NumPy arrays, but only those with semantic type\ncorresponding to an image. Or it might check dimensions of an array to assure it operates\non square matrix.\n\nParameters\n----------\nmethod_name : str\n    Name of the method which would be called.\narguments : Dict[str, Union[Metadata, type]]\n    A mapping between argument names and their metadata objects (for pipeline arguments) or types (for other).\n\nReturns\n-------\nDataMetadata\n    Metadata object of the method call result, or ``None`` if arguments are not accepted\n    by the method."
            }
        },
        "instance_methods": {
            "__init__": {
                "kind": "OTHER",
                "arguments": [
                    "hyperparams",
                    "random_seed",
                    "docker_containers"
                ],
                "returns": "NoneType"
            },
            "fit": {
                "kind": "OTHER",
                "arguments": [
                    "timeout",
                    "iterations"
                ],
                "returns": "primitive_interfaces.base.CallResult[NoneType]"
            },
            "get_params": {
                "kind": "OTHER",
                "arguments": [],
                "returns": "corexcontinuous.corex_continuous.CorexContinuous_Params"
            },
            "produce": {
                "kind": "PRODUCE",
                "arguments": [
                    "inputs",
                    "timeout",
                    "iterations"
                ],
                "returns": "primitive_interfaces.base.CallResult[d3m_metadata.container.numpy.ndarray]"
            },
            "set_params": {
                "kind": "OTHER",
                "arguments": [
                    "params"
                ],
                "returns": "NoneType"
            },
            "set_training_data": {
                "kind": "OTHER",
                "arguments": [
                    "inputs"
                ],
                "returns": "NoneType"
            }
        },
        "class_attributes": {
            "metadata": "d3m_metadata.metadata.PrimitiveMetadata"
        },
        "instance_attributes": {
            "hyperparams": "d3m_metadata.hyperparams.Hyperparams",
            "random_seed": "int",
            "docker_containers": "typing.Dict[str, str]"
        },
        "params": {
            "model": "typing.Union[corexcontinuous.linearcorex.linearcorex.linearcorex.Corex, NoneType]"
        }
    },
    "structural_type": "corexcontinuous.corex_continuous.CorexContinuous"
}